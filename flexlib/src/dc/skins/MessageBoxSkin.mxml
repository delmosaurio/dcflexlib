<?xml version="1.0" encoding="utf-8"?>

<!--

    ADOBE SYSTEMS INCORPORATED
    Copyright 2008 Adobe Systems Incorporated
    All Rights Reserved.

    NOTICE: Adobe permits you to use, modify, and distribute this file
    in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for a Spark SkinnableContainer container.  

     @see spark.components.SkinnableContainer
        
      @langversion 3.0
      @playerversion Flash 10
      @playerversion AIR 1.5
      @productversion Flex 4
-->
<s:Skin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
    xmlns:fb="http://ns.adobe.com/flashbuilder/2009" alpha.disabled="0.5">
	<fx:Metadata>[HostComponent("dc.components.dialogs.MessageBox")]</fx:Metadata>

    <fx:Script fb:purpose="styling">
        <![CDATA[         
            /**
             *  @private
             */
            override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number) : void
            {
                // Push backgroundColor and backgroundAlpha directly.
                // Handle undefined backgroundColor by hiding the background object.
                if (isNaN(getStyle("backgroundColor")))
                {
                    background.visible = false;
                }
                else
                {
                    background.visible = true;
                    bgFill.color = getStyle("backgroundColor");
                    bgFill.alpha = getStyle("backgroundAlpha");
                }
                
				if (!isNaN( getStyle("color"))) {
					labelDisplay.setStyle("color", getStyle("color"));
				}
				
				if (!isNaN( getStyle("padding")) ) {
					padding = getStyle("padding");
				}
				
				if (!isNaN( getStyle("borderColor")) ) {
					borderColor = getStyle("borderColor");
				}
				
				if (!isNaN( getStyle("borderWeight")) ) {
					borderWeight = getStyle("borderWeight");
				}
				
				if (!isNaN( getStyle("borderVisible")) ) {
					borderVisible = getStyle("borderVisible");
				}
				
				if (!isNaN( getStyle("cornerRadius")) ) {
					cornerRadius = getStyle("cornerRadius");
				}
				
				if (getStyle("icon") != null ) {
					imageIcon = getStyle("icon");
					iconDisplay.visible = true;
					iconDisplay.includeInLayout = true;
				} else {
					iconDisplay.visible = false;
					iconDisplay.includeInLayout = false;
				}
						
                super.updateDisplayList(unscaledWidth, unscaledHeight);
            }
			
			[Bindable] private var padding:Number = 10;
			
			[Bindable] private var borderColor:uint = 0x0;
			
			[Bindable] private var borderWeight:Number = 1;
			
			[Bindable] private var borderVisible:Boolean = true;
			
			[Bindable] private var cornerRadius:Number = 0;
			
			[Bindable] private var imageIcon:* = null;
			
        ]]>        
    </fx:Script>
    
    <s:states>
        <s:State name="normal" />
        <s:State name="disabled" />
    </s:states>
    
    <!--- Defines the appearance of the SkinnableContainer class's background. -->
    <s:Rect id="background" left="0" right="0" top="0" bottom="0"
			radiusX="{cornerRadius}" radiusY="{cornerRadius}"
			>
        <s:fill>
            <!--- @private -->
            <s:SolidColor id="bgFill" color="{getStyle('backgroundColor')}"/>
        </s:fill>
    </s:Rect>
    
	<!--- @private -->
	<s:Group left="0" right="0" top="0" bottom="0" width="400" minHeight="{padding*2}">
		
		<!--
		Note: setting the minimum size to 0 here so that changes to the host component's
		size will not be thwarted by this skin part's minimum size.   This is a compromise,
		more about it here: http://bugs.adobe.com/jira/browse/SDK-21143
		-->
		<!--- @copy spark.components.SkinnableContainer#contentGroup -->
		<s:Group id="contentGroup" left="{padding}" right="{padding}" top="{padding}" bottom="{padding}" minWidth="{padding*2}" minHeight="{padding*2}">
			<s:layout>
				<s:BasicLayout/>
			</s:layout>
			
			<s:HGroup verticalCenter="0" horizontalCenter="0" verticalAlign="middle">
				
				<s:BitmapImage id="iconDisplay"
								source="{imageIcon}"
							   />
				
				<s:Label id="labelDisplay"  text="{hostComponent.message}"
						 fontWeight="bold" fontSize="12"/>
				
			</s:HGroup>
			
			
		</s:Group>
		
	</s:Group>
    
	<!-- border -->
	<!--- @private -->
	<s:Rect left="0" right="0" top="0" bottom="0" id="border" visible="{borderVisible}" radiusX="{cornerRadius}" radiusY="{cornerRadius}">
		<s:stroke>
			<!--- @private -->
			<s:SolidColorStroke id="borderStroke" weight="{borderWeight}" color="{borderColor}"/>
		</s:stroke>
	</s:Rect>    
	
</s:Skin>
